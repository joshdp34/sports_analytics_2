[
  {
    "objectID": "19_Rankings.html#introduction",
    "href": "19_Rankings.html#introduction",
    "title": "\n19  Intro to Rankings\n",
    "section": "\n19.1 Introduction",
    "text": "19.1 Introduction\nRanking teams or individual athletes is a fundamental task in sports analytics. From high school leagues to professional competitions, stakeholders use rankings to determine standings, qualify for playoffs, and even allocate resources. Rankings become particularly important when not every participant faces every other participant—a common occurrence in real-world sports.\nIn this chapter, we will introduce a series of methods for ranking competitors, starting with basic win percentage calculations and moving toward more sophisticated methods like Massey Rankings. We will use real sports data and implement these methods in R, primarily leveraging the comperank library, along with standard functions from dplyr and tidyverse. Both cases—full round-robins and partial schedules—will be illustrated."
  },
  {
    "objectID": "19_Rankings.html#win-percentage-ranking",
    "href": "19_Rankings.html#win-percentage-ranking",
    "title": "\n19  Intro to Rankings\n",
    "section": "\n19.2 Win Percentage Ranking",
    "text": "19.2 Win Percentage Ranking\n\n19.2.1 Concept\nThe simplest method for ranking teams or players is the win percentage:\n\\[\n\\text{Win Percentage} = \\frac{\\text{Number of Wins}}{\\text{Number of Games Played}}\n\\]\nThis method assumes that all wins are equally valuable, regardless of opponent strength.\n\n19.2.2 Example: Full Round Robin — Tennis Tournament\nSuppose we have six tennis players who each play every other player exactly once. We simulate the data:\n\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Simulate match results\nset.seed(123)\nplayers = LETTERS[1:6]\nmatches = expand.grid(player1 = players, player2 = players) |&gt;\n  filter(player1 != player2) |&gt;\n  mutate(winner = ifelse(runif(n()) &lt; 0.5, as.character(player1), as.character(player2)))\n\n# Calculate win percentages\nwin_pct = matches |&gt;\n  pivot_longer(cols = c(player1, player2), names_to = \"role\", values_to = \"player\") |&gt;\n  group_by(player) |&gt;\n  summarize(\n    games_played = n(),\n    wins = sum(player == winner),\n    win_pct = wins / games_played\n  ) |&gt;\n  arrange(desc(win_pct))\n\nprint(win_pct)\n\n# A tibble: 6 × 4\n  player games_played  wins win_pct\n  &lt;fct&gt;         &lt;int&gt; &lt;int&gt;   &lt;dbl&gt;\n1 E                10     7     0.7\n2 B                10     6     0.6\n3 F                10     5     0.5\n4 A                10     4     0.4\n5 C                10     4     0.4\n6 D                10     4     0.4\n\n\nNotes:\n\nBecause it’s a full round-robin, every player faces each opponent exactly once.\nWin percentage gives a fair but simplistic view."
  },
  {
    "objectID": "19_Rankings.html#points-based-systems",
    "href": "19_Rankings.html#points-based-systems",
    "title": "\n19  Intro to Rankings\n",
    "section": "\n19.3 Points-Based Systems",
    "text": "19.3 Points-Based Systems\n\n19.3.1 Concept\nSome sports (e.g., soccer) use a points system rather than simple win counts. For example:\n\nWin = 3 points\nDraw = 1 point\nLoss = 0 points\n\nThe total points determine the ranking.\n\n19.3.2 Example: Soccer Mini-League\n\n# Simulate soccer-like match results\nmatches = matches |&gt;\n  mutate(\n    outcome = sample(c(\"win\", \"draw\", \"loss\"), n(), replace = TRUE, prob = c(0.6, 0.2, 0.2)),\n    points_player1 = case_when(\n      outcome == \"win\" & player1 == winner ~ 3,\n      outcome == \"win\" & player2 == winner ~ 0,\n      outcome == \"draw\" ~ 1,\n      TRUE ~ 0\n    ),\n    points_player2 = case_when(\n      outcome == \"win\" & player2 == winner ~ 3,\n      outcome == \"win\" & player1 == winner ~ 0,\n      outcome == \"draw\" ~ 1,\n      TRUE ~ 0\n    )\n  )\n\n# Now gather points for both players\npoints_table = matches |&gt;\n  select(player1, player2, points_player1, points_player2) |&gt;\n  pivot_longer(\n    cols = c(player1, player2),\n    names_to = \"role\",\n    values_to = \"player\"\n  ) |&gt;\n  mutate(points = ifelse(role == \"player1\", points_player1, points_player2)) |&gt;\n  group_by(player) |&gt;\n  summarize(total_points = sum(points)) |&gt;\n  arrange(desc(total_points))\n\nprint(points_table)\n\n# A tibble: 6 × 2\n  player total_points\n  &lt;fct&gt;         &lt;dbl&gt;\n1 E                18\n2 F                14\n3 B                13\n4 C                13\n5 A                 8\n6 D                 5\n\n\nNotes:\n\nPoints systems are common for handling tied games.\nThey incentivize wins over draws."
  },
  {
    "objectID": "19_Rankings.html#colley-matrix-rankings",
    "href": "19_Rankings.html#colley-matrix-rankings",
    "title": "\n19  Intro to Rankings\n",
    "section": "\n19.4 Colley Matrix Rankings",
    "text": "19.4 Colley Matrix Rankings\n\n19.4.1 Concept\nThe Colley method is a linear algebra-based system designed for situations where not everyone plays everyone else. It adjusts for strength of schedule.\nThe Colley Matrix \\(C\\) and vector \\(b\\) are constructed as follows:\n\n\\(C_{ii} = 2 + \\text{Number of games played}\\)\n\\(C_{ij} = - \\text{Number of games between } i \\text{ and } j\\)\n\\(b_i = 1 + 0.5(\\text{Wins}_i - \\text{Losses}_i)\\)\n\nSolving \\(C \\mathbf{r} = \\mathbf{b}\\) gives the ranking vector \\(\\mathbf{r}\\).\nLet’s use the NCAA college football data from the comperes library. It contains game results from ACC teams.\n\nlibrary(comperes)\n\nprint(ncaa2005)\n\n# A longcr object:\n# A tibble: 20 × 3\n    game player score\n   &lt;int&gt; &lt;chr&gt;  &lt;int&gt;\n 1     1 Duke       7\n 2     1 Miami     52\n 3     2 Duke      21\n 4     2 UNC       24\n 5     3 Duke       7\n 6     3 UVA       38\n 7     4 Duke       0\n 8     4 VT        45\n 9     5 Miami     34\n10     5 UNC       16\n11     6 Miami     25\n12     6 UVA       17\n13     7 Miami     27\n14     7 VT         7\n15     8 UNC        7\n16     8 UVA        5\n17     9 UNC        3\n18     9 VT        30\n19    10 UVA       14\n20    10 VT        52\n\n\nNote the format of the dataset. Each game is formated as long in that each row represents a team/player along with a score.\n\nlibrary(comperank)\n\nsimple_rankings = rank_colley(ncaa2005, keep_rating = TRUE)\n\nprint(simple_rankings)\n\n# A tibble: 5 × 3\n  player rating_colley ranking_colley\n  &lt;chr&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1 Duke           0.214              5\n2 Miami          0.786              1\n3 UNC            0.5                3\n4 UVA            0.357              4\n5 VT             0.643              2\n\n\nNotes:\n\nUseful for leagues where participants play unequal numbers of games.\nAutomatically adjusts for the strength of the schedule."
  },
  {
    "objectID": "19_Rankings.html#massey-rankings",
    "href": "19_Rankings.html#massey-rankings",
    "title": "\n19  Intro to Rankings\n",
    "section": "\n19.5 Massey Rankings",
    "text": "19.5 Massey Rankings\n\n19.5.1 Concept\nThe Massey method is another matrix-based method but uses point margins instead of binary win/loss results. It is particularly popular in football analytics.\nThe Massey Matrix \\(M\\) and vector \\(p\\) are constructed based on:\n\nPoint differential between teams\nNumber of games played\n\nSolving \\(M \\mathbf{r} = \\mathbf{p}\\) yields the rankings.\n\n19.5.2 Example: Football-Style Scores\n\nmassey_ranks = rank_massey(ncaa2005, keep_rating = TRUE)\nprint(massey_ranks)\n\n# A tibble: 5 × 3\n  player rating_massey ranking_massey\n  &lt;chr&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1 Duke          -24.8               5\n2 Miami          18.2               1\n3 UNC            -8                 4\n4 UVA            -3.40              3\n5 VT             18                 2\n\n\nNotes:\n\nA team’s margin of victory affects their ranking.\nMassey Rankings are widely respected for American football, college sports, and other score-based competitions."
  },
  {
    "objectID": "19_Rankings.html#challenges-and-considerations",
    "href": "19_Rankings.html#challenges-and-considerations",
    "title": "\n19  Intro to Rankings\n",
    "section": "\n19.6 Challenges and Considerations",
    "text": "19.6 Challenges and Considerations\n\n19.6.1 Unequal Schedules\nWhen teams or individuals do not face all others equally:\n\nSimple win percentages can be misleading.\nPoints-based systems and matrix methods (Colley, Massey) offer better adjustments.\n\n19.6.2 Blowout Wins\nShould winning by 40 points matter more than winning by 1 point? Massey rankings incorporate margin of victory; Colley does not.\n\n19.6.3 Strength of Opponents\nAdvanced systems adjust for opponent strength implicitly (Massey, Colley) or explicitly (Elo ratings, which we will discuss later)."
  },
  {
    "objectID": "19_Rankings.html#case-study-ncaa-football-rankings-using-the-colley-and-massey-methods",
    "href": "19_Rankings.html#case-study-ncaa-football-rankings-using-the-colley-and-massey-methods",
    "title": "\n19  Intro to Rankings\n",
    "section": "\n19.7 Case Study: NCAA Football Rankings Using the Colley and Massey Methods",
    "text": "19.7 Case Study: NCAA Football Rankings Using the Colley and Massey Methods\nCollege football provides an ideal example for ranking teams when the schedule is incomplete and unbalanced. Teams play only a subset of other teams, and opponent strength varies greatly.\nWe will use the cfbdfastR package to obtain actual college football game results.\n\n19.7.1 Step 1: Load and Prepare Data\nNote that cfdbfastR requires an API key to download the data. Run the code ?register_cfbd for details.\n\nlibrary(cfbfastR)\n\ngames = cfbd_game_info(year = 2023) |&gt;\n  select(home_team, away_team, home_points, away_points)\n\nhead(games)\n\n# A tibble: 6 × 4\n  home_team          away_team      home_points away_points\n  &lt;chr&gt;              &lt;chr&gt;                &lt;int&gt;       &lt;int&gt;\n1 Notre Dame         Navy                    42           3\n2 Jacksonville State UTEP                    17          14\n3 San Diego State    Ohio                    20          13\n4 New Mexico State   Massachusetts           30          41\n5 Vanderbilt         Hawai'i                 35          28\n6 USC                San José State          56          28\n\n\n\n19.7.2 Step 2: Construct the Match Results\nWe need to reformat this data to be used by comperank.\n\n# Create long format for comperank\nmatches = games |&gt;\n  mutate(game = row_number()) |&gt; \n  pivot_longer(cols = c(home_team, away_team, home_points, away_points),\n               names_to = c(\"location\", \".value\"),\n               names_sep = \"_\")|&gt;\n  rename(player = team, score = points) |&gt;\n  select(game, player, score)\n \nhead(matches)\n\n# A tibble: 6 × 3\n   game player             score\n  &lt;int&gt; &lt;chr&gt;              &lt;int&gt;\n1     1 Notre Dame            42\n2     1 Navy                   3\n3     2 Jacksonville State    17\n4     2 UTEP                  14\n5     3 San Diego State       20\n6     3 Ohio                  13\n\n\n\n19.7.3 Step 3: Apply the Colley and Massey Rankings\n\n# Colley Ranking\ncolley_rankings = rank_colley(matches)\nprint(colley_rankings) |&gt; \n  arrange(ranking_colley)\n\n# A tibble: 229 × 2\n   player            ranking_colley\n   &lt;chr&gt;                      &lt;dbl&gt;\n 1 Abilene Christian            207\n 2 Air Force                     47\n 3 Akron                        228\n 4 Alabama                        3\n 5 Alabama A&M                  203\n 6 Alcorn State                 199\n 7 App State                     51\n 8 Arizona                       22\n 9 Arizona State                111\n10 Arkansas                     108\n# ℹ 219 more rows\n\n\n# A tibble: 229 × 2\n   player        ranking_colley\n   &lt;chr&gt;                  &lt;dbl&gt;\n 1 Washington                 1\n 2 Michigan                   2\n 3 Alabama                    3\n 4 Florida State              4\n 5 Texas                      5\n 6 Ohio State                 6\n 7 Georgia                    7\n 8 Oregon                     8\n 9 Penn State                 9\n10 James Madison             10\n# ℹ 219 more rows\n\n# Massey Ranking\nmassey_rankings = rank_massey(matches)\nprint(massey_rankings)|&gt; \n  arrange(ranking_massey)\n\n# A tibble: 229 × 2\n   player            ranking_massey\n   &lt;chr&gt;                      &lt;dbl&gt;\n 1 Abilene Christian            148\n 2 Air Force                     64\n 3 Akron                        168\n 4 Alabama                       13\n 5 Alabama A&M                  212\n 6 Alcorn State                 213\n 7 App State                     72\n 8 Arizona                       16\n 9 Arizona State                 82\n10 Arkansas                      66\n# ℹ 219 more rows\n\n\n# A tibble: 229 × 2\n   player       ranking_massey\n   &lt;chr&gt;                 &lt;dbl&gt;\n 1 Oregon                    1\n 2 Michigan                  2\n 3 Ohio State                3\n 4 Penn State                4\n 5 Texas                     5\n 6 Oklahoma                  6\n 7 Georgia                   7\n 8 Notre Dame                8\n 9 Kansas State              9\n10 Washington               10\n# ℹ 219 more rows\n\n\n\n19.7.4 Step 4: Compare Results\nBoth methods produce a final ranking, but note:\n\n\nColley only uses win/loss, no margin of victory.\n\nMassey incorporates score differentials, so teams with dominant wins can rise in rankings.\n\nObservations\n\nA team winning by large margins may rank higher under Massey.\nAn undefeated team still generally ranks highly under both systems.\nLimitations\n\nBoth methods assume independent games. Blowouts may be de-emphasized in the Colley system.\nNeither method dynamically adjusts based on changes in team strength over the season (unlike Elo-based models)."
  }
]