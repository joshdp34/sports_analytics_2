[
  {
    "objectID": "19_Rankings.html#introduction",
    "href": "19_Rankings.html#introduction",
    "title": "\n19  Intro to Rankings\n",
    "section": "\n19.1 Introduction",
    "text": "19.1 Introduction\nRanking teams or individual athletes is a fundamental task in sports analytics. From high school leagues to professional competitions, stakeholders use rankings to determine standings, qualify for playoffs, and even allocate resources. Rankings become particularly important when not every participant faces every other participant—a common occurrence in real-world sports.\nIn this chapter, we will introduce a series of methods for ranking competitors, starting with basic win percentage calculations and moving toward more sophisticated methods like Massey Rankings. We will use real sports data and implement these methods in R, primarily leveraging the comperank library, along with standard functions from dplyr and tidyverse. Both cases—full round-robins and partial schedules—will be illustrated."
  },
  {
    "objectID": "19_Rankings.html#win-percentage-ranking",
    "href": "19_Rankings.html#win-percentage-ranking",
    "title": "\n19  Intro to Rankings\n",
    "section": "\n19.2 Win Percentage Ranking",
    "text": "19.2 Win Percentage Ranking\n\n19.2.1 Concept\nThe simplest method for ranking teams or players is the win percentage:\n\\[\n\\text{Win Percentage} = \\frac{\\text{Number of Wins}}{\\text{Number of Games Played}}\n\\]\nThis method assumes that all wins are equally valuable, regardless of opponent strength.\n\n19.2.2 Example: Full Round Robin — Tennis Tournament\nSuppose we have six tennis players who each play every other player exactly once. We simulate the data:\n\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Simulate match results\nset.seed(123)\nplayers = LETTERS[1:6]\nmatches = expand.grid(player1 = players, player2 = players) |&gt;\n  filter(player1 != player2) |&gt;\n  mutate(winner = ifelse(runif(n()) &lt; 0.5, as.character(player1), as.character(player2)))\n\n# Calculate win percentages\nwin_pct = matches |&gt;\n  pivot_longer(cols = c(player1, player2), names_to = \"role\", values_to = \"player\") |&gt;\n  group_by(player) |&gt;\n  summarize(\n    games_played = n(),\n    wins = sum(player == winner),\n    win_pct = wins / games_played\n  ) |&gt;\n  arrange(desc(win_pct))\n\nprint(win_pct)\n\n# A tibble: 6 × 4\n  player games_played  wins win_pct\n  &lt;fct&gt;         &lt;int&gt; &lt;int&gt;   &lt;dbl&gt;\n1 E                10     7     0.7\n2 B                10     6     0.6\n3 F                10     5     0.5\n4 A                10     4     0.4\n5 C                10     4     0.4\n6 D                10     4     0.4\n\n\nNotes:\n\nBecause it’s a full round-robin, every player faces each opponent exactly once.\nWin percentage gives a fair but simplistic view."
  },
  {
    "objectID": "19_Rankings.html#points-based-systems",
    "href": "19_Rankings.html#points-based-systems",
    "title": "\n19  Intro to Rankings\n",
    "section": "\n19.3 Points-Based Systems",
    "text": "19.3 Points-Based Systems\n\n19.3.1 Concept\nSome sports (e.g., soccer) use a points system rather than simple win counts. For example:\n\nWin = 3 points\nDraw = 1 point\nLoss = 0 points\n\nThe total points determine the ranking.\n\n19.3.2 Example: Soccer Mini-League\n\n# Simulate soccer-like match results\nmatches = matches |&gt;\n  mutate(\n    outcome = sample(c(\"win\", \"draw\", \"loss\"), n(), replace = TRUE, prob = c(0.6, 0.2, 0.2)),\n    points_player1 = case_when(\n      outcome == \"win\" & player1 == winner ~ 3,\n      outcome == \"win\" & player2 == winner ~ 0,\n      outcome == \"draw\" ~ 1,\n      TRUE ~ 0\n    ),\n    points_player2 = case_when(\n      outcome == \"win\" & player2 == winner ~ 3,\n      outcome == \"win\" & player1 == winner ~ 0,\n      outcome == \"draw\" ~ 1,\n      TRUE ~ 0\n    )\n  )\n\n# Now gather points for both players\npoints_table = matches |&gt;\n  select(player1, player2, points_player1, points_player2) |&gt;\n  pivot_longer(\n    cols = c(player1, player2),\n    names_to = \"role\",\n    values_to = \"player\"\n  ) |&gt;\n  mutate(points = ifelse(role == \"player1\", points_player1, points_player2)) |&gt;\n  group_by(player) |&gt;\n  summarize(total_points = sum(points)) |&gt;\n  arrange(desc(total_points))\n\nprint(points_table)\n\n# A tibble: 6 × 2\n  player total_points\n  &lt;fct&gt;         &lt;dbl&gt;\n1 E                18\n2 F                14\n3 B                13\n4 C                13\n5 A                 8\n6 D                 5\n\n\nNotes:\n\nPoints systems are common for handling tied games.\nThey incentivize wins over draws."
  },
  {
    "objectID": "19_Rankings.html#colley-matrix-rankings",
    "href": "19_Rankings.html#colley-matrix-rankings",
    "title": "\n19  Intro to Rankings\n",
    "section": "\n19.4 Colley Matrix Rankings",
    "text": "19.4 Colley Matrix Rankings\n\n19.4.1 Concept\nThe Colley method is a linear algebra-based system designed for situations where not everyone plays everyone else. It adjusts for strength of schedule.\nThe Colley Matrix \\(C\\) and vector \\(b\\) are constructed as follows:\n\n\\(C_{ii} = 2 + \\text{Number of games played}\\)\n\\(C_{ij} = - \\text{Number of games between } i \\text{ and } j\\)\n\\(b_i = 1 + 0.5(\\text{Wins}_i - \\text{Losses}_i)\\)\n\nSolving \\(C \\mathbf{r} = \\mathbf{b}\\) gives the ranking vector \\(\\mathbf{r}\\).\nLet’s use the NCAA college football data from the comperes library. It contains game results from ACC teams.\n\nlibrary(comperes)\n\nprint(ncaa2005)\n\n# A longcr object:\n# A tibble: 20 × 3\n    game player score\n   &lt;int&gt; &lt;chr&gt;  &lt;int&gt;\n 1     1 Duke       7\n 2     1 Miami     52\n 3     2 Duke      21\n 4     2 UNC       24\n 5     3 Duke       7\n 6     3 UVA       38\n 7     4 Duke       0\n 8     4 VT        45\n 9     5 Miami     34\n10     5 UNC       16\n11     6 Miami     25\n12     6 UVA       17\n13     7 Miami     27\n14     7 VT         7\n15     8 UNC        7\n16     8 UVA        5\n17     9 UNC        3\n18     9 VT        30\n19    10 UVA       14\n20    10 VT        52\n\n\nNote the format of the dataset. Each game is formated as long in that each row represents a team/player along with a score.\n\nlibrary(comperank)\n\nsimple_rankings = rank_colley(ncaa2005, keep_rating = TRUE)\n\nprint(simple_rankings)\n\n# A tibble: 5 × 3\n  player rating_colley ranking_colley\n  &lt;chr&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1 Duke           0.214              5\n2 Miami          0.786              1\n3 UNC            0.5                3\n4 UVA            0.357              4\n5 VT             0.643              2\n\n\nNotes:\n\nUseful for leagues where participants play unequal numbers of games.\nAutomatically adjusts for the strength of the schedule."
  },
  {
    "objectID": "19_Rankings.html#massey-rankings",
    "href": "19_Rankings.html#massey-rankings",
    "title": "\n19  Intro to Rankings\n",
    "section": "\n19.5 Massey Rankings",
    "text": "19.5 Massey Rankings\n\n19.5.1 Concept\nThe Massey method is another matrix-based method but uses point margins instead of binary win/loss results. It is particularly popular in football analytics.\nThe Massey Matrix \\(M\\) and vector \\(p\\) are constructed based on:\n\nPoint differential between teams\nNumber of games played\n\nSolving \\(M \\mathbf{r} = \\mathbf{p}\\) yields the rankings.\n\n19.5.2 Example: Football-Style Scores\n\nmassey_ranks = rank_massey(ncaa2005, keep_rating = TRUE)\nprint(massey_ranks)\n\n# A tibble: 5 × 3\n  player rating_massey ranking_massey\n  &lt;chr&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1 Duke          -24.8               5\n2 Miami          18.2               1\n3 UNC            -8                 4\n4 UVA            -3.40              3\n5 VT             18                 2\n\n\nNotes:\n\nA team’s margin of victory affects their ranking.\nMassey Rankings are widely respected for American football, college sports, and other score-based competitions."
  },
  {
    "objectID": "19_Rankings.html#challenges-and-considerations",
    "href": "19_Rankings.html#challenges-and-considerations",
    "title": "\n19  Intro to Rankings\n",
    "section": "\n19.6 Challenges and Considerations",
    "text": "19.6 Challenges and Considerations\n\n19.6.1 Unequal Schedules\nWhen teams or individuals do not face all others equally:\n\nSimple win percentages can be misleading.\nPoints-based systems and matrix methods (Colley, Massey) offer better adjustments.\n\n19.6.2 Blowout Wins\nShould winning by 40 points matter more than winning by 1 point? Massey rankings incorporate margin of victory; Colley does not.\n\n19.6.3 Strength of Opponents\nAdvanced systems adjust for opponent strength implicitly (Massey, Colley) or explicitly (Elo ratings, which we will discuss later)."
  },
  {
    "objectID": "19_Rankings.html#case-study-ncaa-football-rankings-using-the-colley-and-massey-methods",
    "href": "19_Rankings.html#case-study-ncaa-football-rankings-using-the-colley-and-massey-methods",
    "title": "\n19  Intro to Rankings\n",
    "section": "\n19.7 Case Study: NCAA Football Rankings Using the Colley and Massey Methods",
    "text": "19.7 Case Study: NCAA Football Rankings Using the Colley and Massey Methods\nCollege football provides an ideal example for ranking teams when the schedule is incomplete and unbalanced. Teams play only a subset of other teams, and opponent strength varies greatly.\nWe will use the cfbdfastR package to obtain actual college football game results.\n\n19.7.1 Step 1: Load and Prepare Data\nNote that cfdbfastR requires an API key to download the data. Run the code ?register_cfbd for details.\n\nlibrary(cfbfastR)\n\ngames = cfbd_game_info(year = 2023) |&gt;\n  select(home_team, away_team, home_points, away_points)\n\nhead(games)\n\n# A tibble: 6 × 4\n  home_team          away_team      home_points away_points\n  &lt;chr&gt;              &lt;chr&gt;                &lt;int&gt;       &lt;int&gt;\n1 Notre Dame         Navy                    42           3\n2 Jacksonville State UTEP                    17          14\n3 San Diego State    Ohio                    20          13\n4 New Mexico State   Massachusetts           30          41\n5 Vanderbilt         Hawai'i                 35          28\n6 USC                San José State          56          28\n\n\n\n19.7.2 Step 2: Construct the Match Results\nWe need to reformat this data to be used by comperank.\n\n# Create long format for comperank\nmatches = games |&gt;\n  mutate(game = row_number()) |&gt; \n  pivot_longer(cols = c(home_team, away_team, home_points, away_points),\n               names_to = c(\"location\", \".value\"),\n               names_sep = \"_\")|&gt;\n  rename(player = team, score = points) |&gt;\n  select(game, player, score)\n \nhead(matches)\n\n# A tibble: 6 × 3\n   game player             score\n  &lt;int&gt; &lt;chr&gt;              &lt;int&gt;\n1     1 Notre Dame            42\n2     1 Navy                   3\n3     2 Jacksonville State    17\n4     2 UTEP                  14\n5     3 San Diego State       20\n6     3 Ohio                  13\n\n\n\n19.7.3 Step 3: Apply the Colley and Massey Rankings\n\n# Colley Ranking\ncolley_rankings = rank_colley(matches)\nprint(colley_rankings) |&gt; \n  arrange(ranking_colley)\n\n# A tibble: 229 × 2\n   player            ranking_colley\n   &lt;chr&gt;                      &lt;dbl&gt;\n 1 Abilene Christian            207\n 2 Air Force                     47\n 3 Akron                        228\n 4 Alabama                        3\n 5 Alabama A&M                  203\n 6 Alcorn State                 199\n 7 App State                     51\n 8 Arizona                       22\n 9 Arizona State                111\n10 Arkansas                     108\n# ℹ 219 more rows\n\n\n# A tibble: 229 × 2\n   player        ranking_colley\n   &lt;chr&gt;                  &lt;dbl&gt;\n 1 Washington                 1\n 2 Michigan                   2\n 3 Alabama                    3\n 4 Florida State              4\n 5 Texas                      5\n 6 Ohio State                 6\n 7 Georgia                    7\n 8 Oregon                     8\n 9 Penn State                 9\n10 James Madison             10\n# ℹ 219 more rows\n\n# Massey Ranking\nmassey_rankings = rank_massey(matches)\nprint(massey_rankings)|&gt; \n  arrange(ranking_massey)\n\n# A tibble: 229 × 2\n   player            ranking_massey\n   &lt;chr&gt;                      &lt;dbl&gt;\n 1 Abilene Christian            148\n 2 Air Force                     64\n 3 Akron                        168\n 4 Alabama                       13\n 5 Alabama A&M                  212\n 6 Alcorn State                 213\n 7 App State                     72\n 8 Arizona                       16\n 9 Arizona State                 82\n10 Arkansas                      66\n# ℹ 219 more rows\n\n\n# A tibble: 229 × 2\n   player       ranking_massey\n   &lt;chr&gt;                 &lt;dbl&gt;\n 1 Oregon                    1\n 2 Michigan                  2\n 3 Ohio State                3\n 4 Penn State                4\n 5 Texas                     5\n 6 Oklahoma                  6\n 7 Georgia                   7\n 8 Notre Dame                8\n 9 Kansas State              9\n10 Washington               10\n# ℹ 219 more rows\n\n\n\n19.7.4 Step 4: Compare Results\nBoth methods produce a final ranking, but note:\n\n\nColley only uses win/loss, no margin of victory.\n\nMassey incorporates score differentials, so teams with dominant wins can rise in rankings.\n\nObservations\n\nA team winning by large margins may rank higher under Massey.\nAn undefeated team still generally ranks highly under both systems.\nLimitations\n\nBoth methods assume independent games. Blowouts may be de-emphasized in the Colley system.\nNeither method dynamically adjusts based on changes in team strength over the season (unlike Elo-based models)."
  },
  {
    "objectID": "20_Rankings2.html#introduction",
    "href": "20_Rankings2.html#introduction",
    "title": "\n20  Advanced Ranking Methods\n",
    "section": "\n20.1 Introduction",
    "text": "20.1 Introduction\nBuilding upon foundational ranking methods like Massey and Colley, this chapter explores advanced techniques that accommodate more complex competition structures and dynamic performance assessments. We delve into methods such as Elo ratings, Keener, Markov, and Offense-Defense, utilizing R packages like comperank and elo to implement these models. These methods are particularly useful in scenarios where competitors do not all face each other, and where performance evolves over time."
  },
  {
    "objectID": "20_Rankings2.html#elo-ratings",
    "href": "20_Rankings2.html#elo-ratings",
    "title": "\n20  Advanced Ranking Methods\n",
    "section": "\n20.2 Elo Ratings",
    "text": "20.2 Elo Ratings\nThe Elo rating system was originally designed for ranking chess players, where competitors are paired in head-to-head contests and victory is not always guaranteed for the higher-rated player. The method gained popularity in many competitive fields because of its simple, adaptive, and intuitive formulation. Unlike methods that assume balanced schedules or complete round-robins, Elo ratings dynamically adjust after every match based on expected performance and actual outcomes. This makes Elo particularly appealing for sports environments where schedules are irregular and competitors’ performances change over time.\nToday, Elo ratings are widely used across various sports, including soccer (club and international competitions), basketball, and tennis. Moreover, major outlets like FiveThirtyEight use modified Elo models to power predictive rankings for leagues like the NBA and NFL.\n\n20.2.1 How Elo Ratings Work\nAt its core, the Elo formula updates ratings according to:\n\\[\nR_{\\text{new}} = R_{\\text{old}} + K \\cdot (S - E)\n\\]\nWhere:\n\n\n\\(R_{\\text{old}}\\) is the player’s (or team’s) pre-match rating.\n\n\\(K\\) is the maximum possible adjustment per game (chosen by the analyst).\n\n\\(S\\) is the actual score (1 for win, 0.5 for draw, 0 for loss).\n\n\\(E\\) is the expected score calculated from the pre-match ratings.\n\nThe expected score \\(E\\) is determined by the logistic function:\n\\[\nE = \\frac{1}{1 + 10^{(R_{\\text{opponent}} - R_{\\text{own}})/400}}\n\\]\nThus, defeating a much higher-rated opponent results in a substantial increase in rating, while beating a much lower-rated opponent results in only a modest gain.\n\n20.2.2 Example: 10-Team Soccer League (Incomplete Competition)\nConsider a soccer league composed of 10 teams (labeled “Team A” through “Team J”) playing an irregular schedule of 35 matches. Each match has a winner or ends in a draw. Not every team faces every other team, reflecting the typical structure of many sports leagues.\nLet’s simulate this using R and the elo package.\nData Setup\n\nlibrary(tidyverse)\nlibrary(elo)\n\n# Define match results\nmatches &lt;- data.frame(\n  home_team = c(\"Team I\", \"Team G\", \"Team G\", \"Team J\", \"Team E\",\n                \"Team H\", \"Team C\", \"Team D\", \"Team B\", \"Team I\",\n                \"Team A\", \"Team J\", \"Team F\", \"Team D\", \"Team F\",\n                \"Team E\", \"Team A\", \"Team F\", \"Team G\", \"Team C\",\n                \"Team I\", \"Team H\", \"Team J\", \"Team H\", \"Team D\",\n                \"Team A\", \"Team C\", \"Team E\", \"Team B\", \"Team F\",\n                \"Team I\", \"Team B\", \"Team H\", \"Team J\", \"Team G\"),\n  away_team = c(\"Team J\", \"Team H\", \"Team E\", \"Team C\", \"Team H\",\n                \"Team F\", \"Team J\", \"Team F\", \"Team H\", \"Team G\",\n                \"Team F\", \"Team B\", \"Team G\", \"Team A\", \"Team I\",\n                \"Team B\", \"Team B\", \"Team C\", \"Team J\", \"Team G\",\n                \"Team D\", \"Team A\", \"Team E\", \"Team B\", \"Team G\",\n                \"Team D\", \"Team H\", \"Team F\", \"Team C\", \"Team A\",\n                \"Team D\", \"Team A\", \"Team E\", \"Team F\", \"Team H\"),\n  home_score = c(0,0,2,3,4,0,3,0,3,4,3,0,2,4,2,3,1,0,2,1,3,1,0,0,0,3,3,3,2,0,2,1,1,5,2),\n  away_score = c(2,3,0,0,4,0,1,0,0,3,2,3,1,2,4,1,2,2,3,3,3,3,2,3,4,0,4,3,2,0,4,2,1,3,2)\n)\n\nFitting Elo Ratings\n\n# Run Elo model\nelo_results &lt;- elo.run(score(home_score, away_score) ~ home_team + away_team, data = matches, k = 20)\n\n# Display final Elo ratings\nfinal_ratings &lt;- as.data.frame(elo_results)\nprint(final_ratings)\n\n   team.A team.B       p.A wins.A      update.A      update.B    elo.A    elo.B\n1  Team I Team J 0.5000000    0.0 -1.000000e+01  1.000000e+01 1490.000 1510.000\n2  Team G Team H 0.5000000    0.0 -1.000000e+01  1.000000e+01 1490.000 1510.000\n3  Team G Team E 0.4856128    1.0  1.028774e+01 -1.028774e+01 1500.288 1489.712\n4  Team J Team C 0.5143872    1.0  9.712256e+00 -9.712256e+00 1519.712 1490.288\n5  Team E Team H 0.4708367    0.5  5.832654e-01 -5.832654e-01 1490.296 1509.417\n6  Team H Team F 0.5135485    0.5 -2.709691e-01  2.709691e-01 1509.146 1500.271\n7  Team C Team J 0.4577557    1.0  1.084489e+01 -1.084489e+01 1501.133 1508.867\n8  Team D Team F 0.4996100    0.5  7.799115e-03 -7.799115e-03 1500.008 1500.263\n9  Team B Team H 0.4868412    1.0  1.026318e+01 -1.026318e+01 1510.263 1498.883\n10 Team I Team G 0.4851991    1.0  1.029602e+01 -1.029602e+01 1500.296 1489.992\n11 Team A Team F 0.4996213    1.0  1.000757e+01 -1.000757e+01 1510.008 1490.256\n12 Team J Team B 0.4979913    0.0 -9.959826e+00  9.959826e+00 1498.908 1520.223\n13 Team F Team G 0.5003797    1.0  9.992405e+00 -9.992405e+00 1500.248 1479.999\n14 Team D Team A 0.4856131    1.0  1.028774e+01 -1.028774e+01 1510.296 1499.720\n15 Team F Team I 0.4999309    0.0 -9.998618e+00  9.998618e+00 1490.249 1510.295\n16 Team E Team B 0.4570371    1.0  1.085926e+01 -1.085926e+01 1501.155 1509.364\n17 Team A Team B 0.4861249    0.0 -9.722497e+00  9.722497e+00 1489.997 1519.086\n18 Team F Team C 0.4843429    0.0 -9.686857e+00  9.686857e+00 1480.563 1510.819\n19 Team G Team J 0.4728157    0.0 -9.456314e+00  9.456314e+00 1470.543 1508.364\n20 Team C Team G 0.5577043    0.0 -1.115409e+01  1.115409e+01 1499.665 1481.697\n21 Team I Team D 0.4999987    0.5  2.589996e-05 -2.589996e-05 1510.295 1510.296\n22 Team H Team A 0.5127841    0.0 -1.025568e+01  1.025568e+01 1488.627 1500.253\n23 Team J Team E 0.5103732    0.0 -1.020746e+01  1.020746e+01 1498.156 1511.362\n24 Team H Team B 0.4562775    0.0 -9.125549e+00  9.125549e+00 1479.501 1528.212\n25 Team D Team G 0.5410637    0.0 -1.082127e+01  1.082127e+01 1499.474 1492.518\n26 Team A Team D 0.5011208    1.0  9.977585e+00 -9.977585e+00 1510.231 1489.497\n27 Team C Team H 0.5289859    0.0 -1.057972e+01  1.057972e+01 1489.086 1490.081\n28 Team E Team F 0.5442086    0.5 -8.841723e-01  8.841723e-01 1510.478 1481.447\n29 Team B Team C 0.5560702    0.5 -1.121403e+00  1.121403e+00 1527.090 1490.207\n30 Team F Team A 0.4586711    0.5  8.265773e-01 -8.265773e-01 1482.273 1509.404\n31 Team I Team D 0.5298950    0.0 -1.059790e+01  1.059790e+01 1499.697 1500.095\n32 Team B Team A 0.5254308    0.0 -1.050862e+01  1.050862e+01 1516.582 1519.913\n33 Team H Team E 0.4706800    0.5  5.863992e-01 -5.863992e-01 1490.667 1509.892\n34 Team J Team F 0.5228417    1.0  9.543165e+00 -9.543165e+00 1507.700 1472.730\n35 Team G Team H 0.5026636    0.5 -5.327241e-02  5.327241e-02 1492.465 1490.721\n\n\nInterpreting Results\nThe final ratings reflect each team’s strength after all matches. Teams that consistently won against tough opponents rise in the rankings, while teams with losses—especially against lower-rated teams—fall. Elo ratings also reward close games; for example, a narrow loss against a top team is penalized less harshly than a blowout loss.\nThis example captures key features of the Elo system:\n\nDynamic adjustments after each match.\nSensitivity to opponent strength.\nAccommodation of incomplete schedules.\n\nA typical plot that illustrates the elo ratings is the Elo Rating Progression plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n20.2.3 Extensions and Variants\nIn sports analytics, analysts often modify the basic Elo model to better suit particular contexts. Examples include:\n\n\nHome Advantage: Adding extra rating points for home teams.\n\nMargin of Victory: Incorporating goal differential to adjust the rating impact.\n\nRegression to Mean: Reducing ratings between seasons to reflect team changes.\n\nSeasonal Reset: Applying adjustments or resets between seasons or tournaments.\n\nFor instance, soccer models often add 50–100 Elo points to home teams to reflect home-field advantage. Basketball Elo systems frequently include margin of victory.\n\n20.2.4 Limitations\n\nHead-to-head based, thus indirect comparisons (transitivity) are weaker.\nChoice of K value and logistic scale can affect stability.\nDoes not explicitly model margin of victory unless modified."
  },
  {
    "objectID": "20_Rankings2.html#keener-method",
    "href": "20_Rankings2.html#keener-method",
    "title": "\n20  Advanced Ranking Methods\n",
    "section": "\n20.3 Keener Method",
    "text": "20.3 Keener Method\nWhile methods such as Elo and Massey are powerful and intuitive, they primarily rely on win-loss outcomes or points scored to infer rankings. However, in many sports competitions, especially those with incomplete schedules, it can be advantageous to incorporate not just whether a team won, but who they defeated and how strongly they performed relative to their opponents.\nThe Keener Method, developed by James Keener (1993), was proposed to address this issue using linear algebra and matrix theory. This method constructs a head-to-head matrix where each element reflects the strength of a team based on its performance against other teams. Ratings are then computed as the dominant eigenvector of this matrix, which captures both direct and indirect relationships among competitors.\nThis eigenvector-based approach is inspired by models used in social sciences and economics (such as PageRank in internet search algorithms), where the importance of an individual or entity depends not only on direct outcomes but also on the status of those they are connected to.\n\n20.3.1 Conceptual Overview\nAt its core, the Keener method proceeds as follows:\n\nConstruct a head-to-head matrix \\(S\\) where each element \\(S_{ij}\\) reflects how team \\(i\\) performed against team \\(j\\).\nApply pairwise normalization to each entry, which accounts for the number of games played and the direction of competition: \\[\na_{ij} = \\frac{S_{ij} + 1}{S_{ij} + S_{ji} + 2}\n\\] This transformation ensures that the matrix entries are bounded between 0 and 1, and avoids extreme values from dominating the calculation.\nSkew the values using a function to reduce the influence of outliers or lopsided results. This step softens unusually dominant or poor performances to avoid them having an outsized effect on the ratings.\nNormalize the matrix to account for varying numbers of games played. A common approach divides each row by the number of games played by the corresponding team, ensuring that teams with fewer games do not receive artificially inflated ratings.\nEnsure irreducibility by adding a small value to matrix entries if necessary. This guarantees that the matrix satisfies the mathematical requirements for the Perron-Frobenius theorem, which ensures a unique and strictly positive dominant eigenvector.\nCompute the dominant eigenvector of the resulting matrix. This eigenvector contains the Keener ratings, with larger values indicating higher team rankings.\n\n20.3.2 Technical Details\nStep 1: Building the Head-to-Head Matrix\nEach element \\(S_{ij}\\) is calculated from game outcomes. Possible definitions of \\(S_{ij}\\) include:\n\nTotal points scored by team \\(i\\) against team \\(j\\).\nNumber of wins of team \\(i\\) against team \\(j\\).\nPoint differential (points scored minus points allowed).\n\nThe choice of definition should reflect the nature of the sport and the goals of the ranking system.\nStep 2: Pairwise Normalization\nOnce the raw matrix is computed, it is normalized as:\n\\[\na_{ij} = \\frac{S_{ij} + 1}{S_{ij} + S_{ji} + 2}\n\\]\nThis form has desirable properties:\n\nAvoids division by zero.\nProduces values between 0 and 1.\nReflects competitive balance: if \\(S_{ij} = S_{ji}\\), then \\(a_{ij} = 0.5\\).\nStep 3: Skewing\nSports outcomes can sometimes be extreme, with blowout wins or losses. To mitigate this, a skewing function can be applied:\n\\[\na_{ij} \\rightarrow \\text{skew_fun}(a_{ij})\n\\]\nThe default skewing function, skew_keener(), compresses extreme values toward the center of the scale, which makes the matrix more stable and reduces the influence of anomalies.\nStep 4: Normalization for Unequal Games\nIn real-world sports, teams often play different numbers of games. To account for this, each row of the matrix is normalized:\n\\[\n\\text{Normalized } a_{ij} = \\frac{a_{ij}}{\\text{Number of games played by team } i}\n\\]\nThis ensures that teams playing more games do not receive unfairly higher ratings simply due to volume.\nStep 5: Irreducibility\nThe Perron-Frobenius theorem guarantees that a unique, strictly positive eigenvector exists only for irreducible matrices. To ensure this property, a small value (typically the smallest nonzero entry multiplied by a small constant \\(\\epsilon\\)) is added if necessary.\nStep 6: Computing Ratings\nFinally, the Keener ratings are computed as the dominant eigenvector of the matrix:\n\\[\nA \\cdot \\mathbf{r} = \\lambda \\cdot \\mathbf{r}\n\\]\nWhere:\n\n\n\\(A\\) is the normalized and skewed Head-to-Head matrix.\n\n\\(\\mathbf{r}\\) is the rating vector.\n\n\\(\\lambda\\) is the dominant eigenvalue (not of primary interest).\n\nThe rating vector \\(\\mathbf{r}\\) is scaled so that the ratings sum to 1 for interpretability.\n\n20.3.3 Interpretation of Keener Ratings\nHigher values of the Keener rating indicate stronger teams, reflecting both:\n\n\nDirect performance (how well they did against other teams), and\n\nIndirect strength (how strong their opponents were).\n\nFor example, defeating a strong team will improve a team’s rating more than defeating a weak team.\n\n20.3.4 Applications and Considerations\nThe Keener method is particularly useful in leagues or tournaments where:\n\nTeams play different numbers of games.\nThe schedule is unbalanced.\nMargin of victory or opponent strength should be reflected.\n\nHowever, it assumes that performance is transitive and relatively stable, which may not hold in all sports or seasons.\n\n20.3.5 Example in R (using comperank)\n\nlibrary(comperank)\n\nrank_keener(ncaa2005, sum(score1), keep_rating = TRUE)\n\n# A tibble: 5 × 3\n  player rating_keener ranking_keener\n  &lt;chr&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1 Duke          0.0671              5\n2 Miami         0.351               1\n3 UNC           0.158               4\n4 UVA           0.161               3\n5 VT            0.263               2"
  },
  {
    "objectID": "20_Rankings2.html#markov-method",
    "href": "20_Rankings2.html#markov-method",
    "title": "\n20  Advanced Ranking Methods\n",
    "section": "\n20.4 Markov Method",
    "text": "20.4 Markov Method\nIn competitive sports, it is often desirable to rank teams not only based on their win-loss records or the scores of individual games, but also in a way that reflects the flow of competition across the league. That is, when Team A beats Team B, and Team B beats Team C, this suggests that Team A should likely be rated above Team C, even if they never played each other directly.\nThe Markov method captures this idea naturally using concepts from probability and linear algebra. Specifically, the method models competition as a Markov chain, where teams “pass along” strength or credit to those they lose to or defeat. The relative ranking of teams is then determined by the stationary distribution of this Markov chain, which indicates the long-run proportion of time the process would spend at each team if games continued indefinitely.\nBy modeling competitions this way, the Markov method accounts not only for direct wins and losses, but also for the strength of teams defeated (and the strength of those losses), thus providing an elegant way to infer global rankings from local interactions.\n\n20.4.1 Conceptual Overview\nThe Markov method involves several steps:\n\n\nConstruct a transition matrix, where each element represents the proportion of “credit” a team gives to its opponents based on outcomes.\n\nEnsure the matrix is stochastic, meaning rows sum to 1 (as required for a valid Markov chain).\n\nCompute the stationary distribution, which represents the long-term proportion of “strength” or “importance” assigned to each team.\n\nInterpret the stationary distribution as the team ratings or rankings.\n\n20.4.2 Step-by-Step Procedure\nStep 1: Building the Transition Matrix\nThe method starts by constructing a matrix \\(P\\), called the transition matrix, where the entry \\(P_{ij}\\) represents the probability that the ranking process transitions from team \\(i\\) to team \\(j\\). Intuitively:\n\nIf Team A loses to Team B, some “strength” flows from A to B.\nIf Team A defeats Team B, B gives credit to A.\n\nThis can be built from win counts, point differentials, or other measures of performance. One common approach is to define:\n\\[\nP_{ij} = \\frac{\\text{Number of times team } i \\text{ lost to team } j}{\\text{Total number of games played by team } i}\n\\]\nAlternatively, in point-based systems:\n\\[\nP_{ij} = \\frac{\\text{Points allowed by team } i \\text{ to team } j}{\\text{Total points allowed by team } i}\n\\]\nThis ensures that rows sum to 1, satisfying the stochastic matrix condition.\nHandling No Games or Zero Totals\nIf a team has not lost or allowed points to any team (e.g., an undefeated team), small adjustments or smoothing may be applied (such as adding a small constant to all entries) to avoid rows summing to zero, which would break the Markov model.\nStep 2: Computing the Stationary Distribution\nOnce the matrix \\(P\\) is built, the next step is to find its stationary distribution \\(\\pi\\), which satisfies:\n\\[\n\\pi = \\pi P\n\\]\nand\n\\[\n\\sum_i \\pi_i = 1\n\\]\nThis vector \\(\\pi\\) represents the long-run proportion of “credit” or “importance” held by each team in the competition network. In other words, if competition continued indefinitely, \\(\\pi_i\\) is the proportion of time the process would “visit” team \\(i\\).\nIn matrix algebra, \\(\\pi\\) is the dominant left eigenvector of \\(P\\) corresponding to eigenvalue 1.\nStep 3: Interpreting Rankings\nTeams with higher values in \\(\\pi\\) are considered stronger, as they receive more credit from the flow of competition. This incorporates both:\n\n\nDirect performance (winning games or scoring points), and\n\nIndirect strength (beating good teams, or losing only to top teams).\n\nThe resulting rankings thus naturally reflect the interconnectedness and relative importance of each competitor.\n\n20.4.3 Applications and Advantages\nThe Markov method is particularly useful in sports environments characterized by:\n\n\nIncomplete schedules, where not every team faces every other team.\n\nIrregular competition patterns, such as college sports, tennis, or round-robin tournaments.\n\nDesire to emphasize strength of schedule, as the model naturally accounts for opponent quality.\n\nAdvantages\n\nAccounts for indirect competition (“I beat the team that beat you”).\nEnsures every team is rated, even if they do not play head-to-head.\nMathematically robust and elegant.\nLimitations\n\nCan produce unstable results if teams are disconnected (require smoothing).\nDoes not explicitly account for margin of victory unless incorporated into the matrix construction.\nMay favor teams in more connected parts of the schedule network.\n\n20.4.4 Example in R (using comperank)\n\nrank_markov(\n  cr_data = ncaa2005,\n  comperes::num_wins(score1, score2, half_for_draw = FALSE),\n  stoch_modify = vote_equal,\n  keep_rating = TRUE\n)\n\n# A tibble: 5 × 3\n  player rating_markov ranking_markov\n  &lt;chr&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1 Duke          0.0876              5\n2 Miami         0.438               1\n3 UNC           0.146               3\n4 UVA           0.109               4\n5 VT            0.219               2\n\n\n\n20.4.5 Relationship to Other Ranking Methods\n\n\n\n\n\n\n\n\nMethod\nHandles Incomplete Schedules\nAccounts for Opponent Strength\nUses Point Differentials\n\n\n\nMassey\nYes\nPartially\nYes\n\n\nColley\nYes\nNo\nNo\n\n\nElo\nYes\nYes (indirectly through ratings)\nOptional\n\n\nKeener\nYes\nYes (via eigenvector structure)\nOptional\n\n\nMarkov\nYes\nYes (flow-based)\nOptional\n\n\n\nAs shown above, the Markov method excels when the strength of schedule and indirect results are important considerations."
  },
  {
    "objectID": "20_Rankings2.html#the-offense-defense-method",
    "href": "20_Rankings2.html#the-offense-defense-method",
    "title": "\n20  Advanced Ranking Methods\n",
    "section": "\n20.5 The Offense-Defense Method",
    "text": "20.5 The Offense-Defense Method\nMany ranking methods, such as Massey, Elo, and even Keener and Markov, focus primarily on overall team performance — considering whether teams win or lose and how they perform relative to others. However, in many sports, success is the result of two distinct dimensions of performance:\n\n\nOffense: The ability to score points (or goals).\n\nDefense: The ability to prevent opponents from scoring.\n\nFor example, a team may excel offensively but be weak defensively, while another may win many games based on a strong defense despite scoring relatively few points.\nThe Offense-Defense Method explicitly models this dual nature of performance by assigning two ratings to each team:\n\nAn Offensive rating, reflecting how well the team scores.\nA Defensive rating, reflecting how well the team prevents opponents from scoring.\n\nBy jointly modeling these two dimensions, this method provides a more nuanced and complete assessment of team strength than methods that focus only on net results.\n\n20.5.1 Conceptual Overview\nThe Offense-Defense method involves the following key ideas:\n\nConstruct a matrix of points scored from team \\(i\\) to team \\(j\\), capturing head-to-head offensive performance.\nNormalize this matrix so that rows (or columns) represent proportional contributions.\n\nApply iterative updates:\n\nOffensive ratings are improved by scoring against teams with strong defensive ratings.\nDefensive ratings are improved by limiting the scoring of teams with strong offensive ratings.\n\n\nConverge to a solution where each team’s offense and defense ratings are mutually consistent.\n\nIn matrix terms, the problem becomes finding vectors \\(\\mathbf{o}\\) (offense) and \\(\\mathbf{d}\\) (defense) such that:\n\\[\n\\mathbf{o} = A \\cdot \\mathbf{d}^{-1}\n\\]\n\\[\n\\mathbf{d} = A^T \\cdot \\mathbf{o}^{-1}\n\\]\nWhere:\n\n\n\\(A\\) is the matrix of points scored (i.e., \\(A_{ij}\\) is the points scored by team \\(i\\) against team \\(j\\)).\n\n\\(A^T\\) is the transpose (points allowed).\n\n\\(\\mathbf{o}^{-1}\\) and \\(\\mathbf{d}^{-1}\\) indicate element-wise reciprocals.\n\nThrough iteration, these equations converge to stable offense and defense ratings.\n\n20.5.2 Step-by-Step Procedure\nStep 1: Building the Points Matrix\nThe matrix \\(A\\) is constructed as follows:\n\\[\nA_{ij} = \\text{Total points scored by team } i \\text{ against team } j\n\\]\nIf no games occurred between teams, entries are typically set to zero.\nStep 2: Normalization (Optional)\nTo avoid domination by teams that played more games, rows or columns may be normalized to represent proportions rather than raw counts.\nStep 3: Iterative Rating Updates\nUsing an iterative algorithm, offensive and defensive ratings are updated repeatedly:\n\\[\no_i^{(t+1)} = \\sum_j A_{ij} \\cdot \\frac{1}{d_j^{(t)}}\n\\]\n\\[\nd_i^{(t+1)} = \\sum_j A_{ji} \\cdot \\frac{1}{o_j^{(t+1)}}\n\\]\nWhere:\n\n\n\\(o_i^{(t)}\\) and \\(d_i^{(t)}\\) are the offense and defense ratings at iteration \\(t\\).\nIteration continues until ratings stabilize (changes fall below a tolerance level).\nStep 4: Interpreting Ratings\n\nA high offense rating indicates a team that scores frequently against strong defenses.\nA low defense rating (note: lower is better) indicates a team that limits scoring, especially from strong offenses.\n\nTo create an overall ranking, analysts may use:\n\\[\n\\text{Overall Rating} = \\frac{o_i}{d_i}\n\\]\nHigher values indicate stronger overall teams that both score well and prevent scoring effectively.\n\n20.5.3 Example in R (using comperank)\n\nrank_od(ncaa2005, mean(score1), keep_rating = TRUE)\n\n# A tibble: 5 × 7\n  player rating_off rating_def rating_od ranking_off ranking_def ranking_od\n  &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;\n1 Duke         39.7      1.57       25.3           5           5          5\n2 Miami       181.       0.860     211.            2           2          2\n3 UNC          58.1      1.15       50.6           4           4          4\n4 UVA          95.0      0.914     104.            3           3          3\n5 VT          183.       0.532     344.            1           1          1\n\n\nThis function in comperank:\n\nAutomatically builds the scoring matrix.\nPerforms iterative updates.\nReturns offense and defense ratings, as well as the overall ranking.\n\n20.5.4 Applications and Advantages\nThe Offense-Defense method is especially valuable in sports where:\n\nBoth scoring ability and defensive prowess are critical (e.g., basketball, football, soccer).\nBlowout scores and defensive shutouts occur.\nIt is important to disentangle teams that win via different styles.\n\nAdvantages\n\nCaptures both offensive and defensive performance explicitly.\nMore nuanced than simple win-loss based methods.\nAllows identification of teams that are elite offensively or defensively, even if overall rankings are modest.\nLimitations\n\nRequires detailed game score data (win-loss results alone are insufficient).\nIterative algorithms may be sensitive to initial values or convergence criteria.\nInterpretation is more complex, as two ratings (offense and defense) are produced.\n\n20.5.5 Comparison with Other Methods\n\n\n\n\n\n\n\n\nMethod\nUses Point Totals\nSeparates Offense and Defense\nHandles Incomplete Schedules\n\n\n\nMassey\nYes\nNo\nYes\n\n\nColley\nNo\nNo\nYes\n\n\nElo\nOptional\nNo\nYes\n\n\nKeener\nOptional\nNo\nYes\n\n\nMarkov\nOptional\nNo\nYes\n\n\nOffense-Defense\nYes\nYes\nYes\n\n\n\nThe Offense-Defense method is unique in its explicit separation of scoring and defending ability, making it highly informative for performance analysis."
  }
]